# =====================================================
# TESTE PAYLOAD CORRIGIDO - USU√ÅRIO 6
# =====================================================

Write-Host "üß™ Testando Payload Corrigido para Usu√°rio 6..." -ForegroundColor Green

# Primeiro, vamos buscar os dados corretos do usu√°rio 6
Write-Host "`nüîç Buscando dados do usu√°rio 6..." -ForegroundColor Yellow

# Simular busca de agente e perfis (voc√™ pode implementar endpoints reais)
$agente_id = 5  # Assumindo que usu√°rio 6 tem agente 5
$perfil_id = 2  # Assumindo que usu√°rio 6 tem perfil 2

# Payload corrigido com todos os campos necess√°rios
$payload = @{
    usuario_id = 6
    action = "start"
    logged_user = @{
        id = 6
        name = "Usu√°rio Elleve Padr√£o"
        email = "rmacedo2005@hotmail.com"
    }
    agente_id = $agente_id
    perfil_id = $perfil_id
    perfis_permitidos = @(2, 3)  # Perfis permitidos
    usuarios_permitidos = @(6)   # Usu√°rios permitidos
} | ConvertTo-Json -Depth 3

Write-Host "üì§ Payload corrigido enviado:" -ForegroundColor Yellow
Write-Host $payload -ForegroundColor Gray

try {
    $response = Invoke-RestMethod -Uri "http://localhost:5678/webhook/start" -Method POST -Body $payload -ContentType "application/json"
    
    Write-Host "‚úÖ Resposta recebida:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 3 | Write-Host -ForegroundColor Gray
    
    Write-Host "`nüîç Verificando se leads foram reservados..." -ForegroundColor Yellow
    
    # Aguardar um pouco para o processamento
    Start-Sleep -Seconds 3
    
    Write-Host "`nüìä Verificando leads reservados no banco..." -ForegroundColor Cyan
    
} catch {
    Write-Host "‚ùå Erro na requisi√ß√£o:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
}

Write-Host "`nüèÅ Teste do Payload Corrigido (Usu√°rio 6) conclu√≠do!" -ForegroundColor Green
