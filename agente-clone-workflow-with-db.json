{
  "name": "Agente Clone - Com DB",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "create-agente-complete",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-create-complete",
      "name": "Webhook Create Complete",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Normalizar dados do agente\ntry {\n  const body = $input.first().json.body;\n  \n  const agentName = body.agent_name || 'Agente Padr√£o';\n  const agentType = body.agent_type || 'agentePadrao';\n  const agentId = body.agent_id || 'PADRAO123456789';\n  const userId = body.user_id || '1';\n  \n  console.log('üìä Dados normalizados:', { agentName, agentType, agentId, userId });\n  \n  return {\n    json: {\n      agentName,\n      agentType,\n      agentId,\n      userId\n    }\n  };\n} catch (error) {\n  console.log('‚ùå Erro na normaliza√ß√£o:', error.message);\n  return {\n    json: {\n      agentName: 'Agente Padr√£o',\n      agentType: 'agentePadrao',\n      agentId: 'PADRAO123456789',\n      userId: '1'\n    }\n  };\n}"
      },
      "id": "normalize-data-complete",
      "name": "Normalizar Dados Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Preparar dados para inser√ß√£o na tabela agente_config\ntry {\n  const data = $input.first().json;\n  \n  const agenteConfig = {\n    id: data.agentId,\n    nome: data.agentName,\n    workflow_id: data.agentId, // Usar o mesmo ID como workflow_id\n    webhook_url: `webhook/start-${data.agentType}`,\n    descricao: `Agente ${data.agentName} para prospec√ß√£o de leads`,\n    icone: 'ü§ñ',\n    cor: 'bg-blue-500',\n    ativo: true,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  };\n  \n  console.log('üìä Dados do agente para DB:', agenteConfig);\n  \n  return {\n    json: {\n      ...data,\n      agenteConfig\n    }\n  };\n} catch (error) {\n  console.log('‚ùå Erro na prepara√ß√£o do DB:', error.message);\n  return {\n    json: {\n      ...data,\n      error: true,\n      message: error.message\n    }\n  };\n}"
      },
      "id": "prepare-db-insert",
      "name": "Preparar Inser√ß√£o DB",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "agente_config",
        "columns": "id, nome, workflow_id, webhook_url, descricao, icone, cor, ativo, created_at, updated_at",
        "values": "={{ $json.agenteConfig.id }}, {{ $json.agenteConfig.nome }}, {{ $json.agenteConfig.workflow_id }}, {{ $json.agenteConfig.webhook_url }}, {{ $json.agenteConfig.descricao }}, {{ $json.agenteConfig.icone }}, {{ $json.agenteConfig.cor }}, {{ $json.agenteConfig.ativo }}, {{ $json.agenteConfig.created_at }}, {{ $json.agenteConfig.updated_at }}"
      },
      "id": "postgres-insert",
      "name": "PostgreSQL - Inserir Agente",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Preparar dados para cria√ß√£o do workflow Start\ntry {\n  const data = $input.first().json;\n  \n  const workflowData = {\n    name: `Agente SDR - Start - ${data.agentName}`,\n    nodes: [\n      {\n        id: 'manual-trigger',\n        name: 'Manual Trigger',\n        type: 'n8n-nodes-base.manualTrigger',\n        typeVersion: 1,\n        position: [100, 100],\n        parameters: {}\n      }\n    ],\n    connections: {},\n    active: false,\n    settings: {},\n    tags: ['Agente', data.agentName, 'Start']\n  };\n  \n  console.log('üîß Workflow Start preparado:', workflowData);\n  \n  return {\n    json: {\n      workflowData,\n      agentName: data.agentName,\n      agentType: data.agentType,\n      agentId: data.agentId,\n      type: 'start'\n    }\n  };\n} catch (error) {\n  console.log('‚ùå Erro na prepara√ß√£o do Start:', error.message);\n  return {\n    json: {\n      error: true,\n      message: error.message,\n      type: 'start'\n    }\n  };\n}"
      },
      "id": "prepare-start-complete",
      "name": "Preparar Start Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "jsCode": "// Preparar dados para cria√ß√£o do workflow Lista\ntry {\n  const data = $input.first().json;\n  \n  const workflowData = {\n    name: `Agente SDR - Lista - ${data.agentName}`,\n    nodes: [\n      {\n        id: 'manual-trigger',\n        name: 'Manual Trigger',\n        type: 'n8n-nodes-base.manualTrigger',\n        typeVersion: 1,\n        position: [100, 100],\n        parameters: {}\n      }\n    ],\n    connections: {},\n    active: false,\n    settings: {},\n    tags: ['Agente', data.agentName, 'Lista']\n  };\n  \n  console.log('üîß Workflow Lista preparado:', workflowData);\n  \n  return {\n    json: {\n      workflowData,\n      agentName: data.agentName,\n      agentType: data.agentType,\n      agentId: data.agentId,\n      type: 'lista'\n    }\n  };\n} catch (error) {\n  console.log('‚ùå Erro na prepara√ß√£o da Lista:', error.message);\n  return {\n    json: {\n      error: true,\n      message: error.message,\n      type: 'lista'\n    }\n  };\n}"
      },
      "id": "prepare-lista-complete",
      "name": "Preparar Lista Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Preparar dados para cria√ß√£o do workflow Status\ntry {\n  const data = $input.first().json;\n  \n  const workflowData = {\n    name: `Agente SDR - Status - ${data.agentName}`,\n    nodes: [\n      {\n        id: 'manual-trigger',\n        name: 'Manual Trigger',\n        type: 'n8n-nodes-base.manualTrigger',\n        typeVersion: 1,\n        position: [100, 100],\n        parameters: {}\n      }\n    ],\n    connections: {},\n    active: false,\n    settings: {},\n    tags: ['Agente', data.agentName, 'Status']\n  };\n  \n  console.log('üîß Workflow Status preparado:', workflowData);\n  \n  return {\n    json: {\n      workflowData,\n      agentName: data.agentName,\n      agentType: data.agentType,\n      agentId: data.agentId,\n      type: 'status'\n    }\n  };\n} catch (error) {\n  console.log('‚ùå Erro na prepara√ß√£o do Status:', error.message);\n  return {\n    json: {\n      error: true,\n      message: error.message,\n      type: 'status'\n    }\n  };\n}"
      },
      "id": "prepare-status-complete",
      "name": "Preparar Status Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "jsCode": "// Preparar dados para cria√ß√£o do workflow Stop\ntry {\n  const data = $input.first().json;\n  \n  const workflowData = {\n    name: `Agente SDR - Stop - ${data.agentName}`,\n    nodes: [\n      {\n        id: 'manual-trigger',\n        name: 'Manual Trigger',\n        type: 'n8n-nodes-base.manualTrigger',\n        typeVersion: 1,\n        position: [100, 100],\n        parameters: {}\n      }\n    ],\n    connections: {},\n    active: false,\n    settings: {},\n    tags: ['Agente', data.agentName, 'Stop']\n  };\n  \n  console.log('üîß Workflow Stop preparado:', workflowData);\n  \n  return {\n    json: {\n      workflowData,\n      agentName: data.agentName,\n      agentType: data.agentType,\n      agentId: data.agentId,\n      type: 'stop'\n    }\n  };\n} catch (error) {\n  console.log('‚ùå Erro na prepara√ß√£o do Stop:', error.message);\n  return {\n    json: {\n      error: true,\n      message: error.message,\n      type: 'stop'\n    }\n  };\n}"
      },
      "id": "prepare-stop-complete",
      "name": "Preparar Stop Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "url": "https://n8n.code-iq.com.br/api/v1/workflows",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "n8nApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ $json.workflowData }}",
        "options": {}
      },
      "id": "create-workflow-complete",
      "name": "Create Workflow Complete",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 350]
    },
    {
      "parameters": {
        "jsCode": "// Consolidar resultado final\ntry {\n  const data = $input.first().json;\n  \n  console.log('üìä Resultado da cria√ß√£o do workflow:', data);\n  \n  return {\n    json: {\n      success: true,\n      message: 'Agente criado com sucesso!',\n      agent: {\n        id: data.agentId,\n        name: data.agentName,\n        type: data.agentType\n      },\n      workflow: {\n        id: data.id,\n        name: data.name,\n        active: data.active\n      }\n    }\n  };\n} catch (error) {\n  console.log('‚ùå Erro na consolida√ß√£o:', error.message);\n  return {\n    json: {\n      success: false,\n      message: 'Erro na cria√ß√£o do agente',\n      error: error.message\n    }\n  };\n}"
      },
      "id": "consolidate-result-complete",
      "name": "Consolidar Resultado Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 350]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "respond-success-complete",
      "name": "Respond Success Complete",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 350]
    }
  ],
  "connections": {
    "Webhook Create Complete": {
      "main": [
        [
          {
            "node": "Normalizar Dados Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizar Dados Complete": {
      "main": [
        [
          {
            "node": "Preparar Inser√ß√£o DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Inser√ß√£o DB": {
      "main": [
        [
          {
            "node": "PostgreSQL - Inserir Agente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PostgreSQL - Inserir Agente": {
      "main": [
        [
          {
            "node": "Preparar Start Complete",
            "type": "main",
            "index": 0
          },
          {
            "node": "Preparar Lista Complete",
            "type": "main",
            "index": 0
          },
          {
            "node": "Preparar Status Complete",
            "type": "main",
            "index": 0
          },
          {
            "node": "Preparar Stop Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Start Complete": {
      "main": [
        [
          {
            "node": "Create Workflow Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Lista Complete": {
      "main": [
        [
          {
            "node": "Create Workflow Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Status Complete": {
      "main": [
        [
          {
            "node": "Create Workflow Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Stop Complete": {
      "main": [
        [
          {
            "node": "Create Workflow Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Workflow Complete": {
      "main": [
        [
          {
            "node": "Consolidar Resultado Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidar Resultado Complete": {
      "main": [
        [
          {
            "node": "Respond Success Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "id": "agente-clone-workflow-with-db",
  "meta": {
    "templateCredsSetupCompleted": true
  }
}
